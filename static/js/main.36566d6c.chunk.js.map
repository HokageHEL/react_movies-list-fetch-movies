{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","App.tsx","index.tsx"],"names":["MovieCard","_ref","movie","_jsxs","className","children","_jsx","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FindMovie","onMovieAdd","_useState","useState","undefined","_useState2","_slicedToArray","setMovie","_useState3","_useState4","query","setQuery","_useState5","_useState6","isLoading","setIsLoading","_useState7","_useState8","isError","setIsError","isButtonDisabled","trim","searchMovie","name","trimedName","fetch","concat","then","res","json","catch","Response","Error","getMovie","movieFromServer","newMovie","movieFromApi","Title","Plot","Poster","imdbID","_Fragment","htmlFor","type","id","placeholder","value","onChange","e","target","disabled","onClick","preventDefault","App","setMovies","some","someMovie","prev","_toConsumableArray","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.36566d6c.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import React, { useState } from 'react';\nimport './FindMovie.scss';\nimport { getMovie } from '../../api';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\nimport { MovieData } from '../../types/MovieData';\n\ninterface Props {\n  onMovieAdd: (movie: Movie) => void,\n}\n\nexport const FindMovie: React.FC<Props> = ({ onMovieAdd }) => {\n  const [movie, setMovie] = useState<Movie | undefined>(undefined);\n  const [query, setQuery] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  const isButtonDisabled = query.trim() === '';\n\n  const normalizedMovie = (movieFromApi: MovieData): Movie => {\n    const mutatedMovie = {\n      title: movieFromApi.Title,\n      description: movieFromApi.Plot,\n      imgUrl: movieFromApi.Poster === 'N/A'\n        ? 'https://via.placeholder.com/360x270.png?text=no%20preview'\n        : movieFromApi.Poster,\n      imdbUrl: `https://www.imdb.com/title/${movieFromApi.imdbID}`,\n      imdbId: movieFromApi.imdbID,\n    };\n\n    return mutatedMovie;\n  };\n\n  const searchMovie = (name: string) => {\n    const trimedName = name.trim();\n\n    if (trimedName === '') {\n      return;\n    }\n\n    setIsLoading(true);\n    setIsError(false);\n\n    getMovie(trimedName)\n      .then(movieFromServer => {\n        if ('Error' in movieFromServer) {\n          setIsLoading(false);\n          setIsError(true);\n        } else {\n          setIsError(false);\n          setIsLoading(false);\n\n          const newMovie = normalizedMovie(movieFromServer);\n\n          setMovie(newMovie);\n        }\n      });\n  };\n\n  const addMovie = () => {\n    if (movie) {\n      onMovieAdd(movie);\n    }\n\n    setMovie(undefined);\n    setQuery('');\n  };\n\n  const handleInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setIsError(false);\n    setQuery(e.target.value);\n  };\n\n  const handleSubmitSearch = (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    searchMovie(query);\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\">\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={`input ${isError && 'is-danger'}`}\n              value={query}\n              onChange={handleInput}\n            />\n          </div>\n\n          {isError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={`button is-light ${isLoading && 'is-loading'}`}\n              disabled={isButtonDisabled}\n              onClick={handleSubmitSearch}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          {movie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={() => addMovie()}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {movie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          {movie && <MovieCard movie={movie} />}\n        </div>\n      )}\n    </>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=281ff341';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const onMovieAdd = (movie: Movie) => {\n    const hasThisMovie = movies\n      .some(someMovie => movie.imdbId === someMovie.imdbId);\n\n    if (hasThisMovie) {\n      return;\n    }\n\n    setMovies(prev => [\n      ...prev,\n      movie,\n    ]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie onMovieAdd={onMovieAdd} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}